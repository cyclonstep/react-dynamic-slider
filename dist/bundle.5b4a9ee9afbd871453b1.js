!function(e){function t(t){for(var n,o,a=t[0],i=t[1],s=t[2],u=0,l=[];u<a.length;u++)o=a[u],T[o]&&l.push(T[o][0]),T[o]=0;for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n]);for(D&&D(t);l.length;)l.shift()();return x.push.apply(x,s||[]),r()}function r(){for(var e,t=0;t<x.length;t++){for(var r=x[t],n=!0,o=1;o<r.length;o++){var a=r[o];0!==T[a]&&(n=!1)}n&&(x.splice(t--,1),e=j(j.s=r[0]))}return e}var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!w[e]||!k[e])return;for(var r in k[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(m[r]=t[r]);0==--b&&0===y&&O()}(e,t),n&&n(e,t)};var o,a=!0,i="5b4a9ee9afbd871453b1",s=1e4,u={},l=[],c=[];var d=[],p="idle";function f(e){p=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var h,m,v,b=0,y=0,g={},k={},w={};function M(e){return+e+""===e?+e:e}function _(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return a=e,f("check"),(t=s,t=t||1e4,new Promise(function(e,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var n=new XMLHttpRequest,o=j.p+""+i+".hot-update.json";n.open("GET",o,!0),n.timeout=t,n.send(null)}catch(e){return r(e)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)r(new Error("Manifest request to "+o+" timed out."));else if(404===n.status)e();else if(200!==n.status&&304!==n.status)r(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(n.responseText)}catch(e){return void r(e)}e(t)}}})).then(function(e){if(!e)return f("idle"),null;k={},g={},w=e.c,v=e.h,f("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});for(var r in m={},T)P(r);return"prepare"===p&&0===y&&0===b&&O(),t});var t}function P(e){w[e]?(k[e]=!0,b++,function(e){var t=document.getElementsByTagName("head")[0],r=document.createElement("script");r.charset="utf-8",r.src=j.p+""+e+"."+i+".hot-update.js",t.appendChild(r)}(e)):g[e]=!0}function O(){f("ready");var e=h;if(h=null,e)if(a)Promise.resolve().then(function(){return E(a)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in m)Object.prototype.hasOwnProperty.call(m,r)&&t.push(M(r));e.resolve(t)}}function E(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var r,n,o,a,s;function c(e){for(var t=[e],r={},n=t.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),i=o.id,s=o.chain;if((a=S[i])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(a.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var u=0;u<a.parents.length;u++){var l=a.parents[u],c=S[l];if(c){if(c.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([l]),moduleId:i,parentId:l};t.includes(l)||(c.hot._acceptedDependencies[i]?(r[l]||(r[l]=[]),d(r[l],[i])):(delete r[l],t.push(l),n.push({chain:s.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];e.includes(n)||e.push(n)}}t=t||{};var h={},b=[],y={},g=function(){console.warn("[HMR] unexpected require("+_.moduleId+") to disposed module")};for(var k in m)if(Object.prototype.hasOwnProperty.call(m,k)){var _;s=M(k);var P=!1,O=!1,E=!1,x="";switch((_=m[k]?c(s):{type:"disposed",moduleId:k}).chain&&(x="\nUpdate propagation: "+_.chain.join(" -> ")),_.type){case"self-declined":t.onDeclined&&t.onDeclined(_),t.ignoreDeclined||(P=new Error("Aborted because of self decline: "+_.moduleId+x));break;case"declined":t.onDeclined&&t.onDeclined(_),t.ignoreDeclined||(P=new Error("Aborted because of declined dependency: "+_.moduleId+" in "+_.parentId+x));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(_),t.ignoreUnaccepted||(P=new Error("Aborted because "+s+" is not accepted"+x));break;case"accepted":t.onAccepted&&t.onAccepted(_),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(_),E=!0;break;default:throw new Error("Unexception type "+_.type)}if(P)return f("abort"),Promise.reject(P);if(O)for(s in y[s]=m[s],d(b,_.outdatedModules),_.outdatedDependencies)Object.prototype.hasOwnProperty.call(_.outdatedDependencies,s)&&(h[s]||(h[s]=[]),d(h[s],_.outdatedDependencies[s]));E&&(d(b,[_.moduleId]),y[s]=g)}var V,C=[];for(n=0;n<b.length;n++)s=b[n],S[s]&&S[s].hot._selfAccepted&&C.push({module:s,errorHandler:S[s].hot._selfAccepted});f("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete T[e]}(e)});for(var I,D,N=b.slice();N.length>0;)if(s=N.pop(),a=S[s]){var R={},z=a.hot._disposeHandlers;for(o=0;o<z.length;o++)(r=z[o])(R);for(u[s]=R,a.hot.active=!1,delete S[s],delete h[s],o=0;o<a.children.length;o++){var A=S[a.children[o]];A&&((V=A.parents.indexOf(s))>=0&&A.parents.splice(V,1))}}for(s in h)if(Object.prototype.hasOwnProperty.call(h,s)&&(a=S[s]))for(D=h[s],o=0;o<D.length;o++)I=D[o],(V=a.children.indexOf(I))>=0&&a.children.splice(V,1);for(s in f("apply"),i=v,y)Object.prototype.hasOwnProperty.call(y,s)&&(e[s]=y[s]);var H=null;for(s in h)if(Object.prototype.hasOwnProperty.call(h,s)&&(a=S[s])){D=h[s];var L=[];for(n=0;n<D.length;n++)if(I=D[n],r=a.hot._acceptedDependencies[I]){if(L.includes(r))continue;L.push(r)}for(n=0;n<L.length;n++){r=L[n];try{r(D)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:s,dependencyId:D[n],error:e}),t.ignoreErrored||H||(H=e)}}}for(n=0;n<C.length;n++){var X=C[n];s=X.module,l=[s];try{j(s)}catch(e){if("function"==typeof X.errorHandler)try{X.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:r,originalError:e}),t.ignoreErrored||H||(H=r),H||(H=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:s,error:e}),t.ignoreErrored||H||(H=e)}}return H?(f("fail"),Promise.reject(H)):(f("idle"),new Promise(function(e){e(b)}))}var S={},T={1:0},x=[];function j(t){if(S[t])return S[t].exports;var r=S[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:o!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:_,apply:E,status:function(e){if(!e)return p;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:u[e]};return o=void 0,t}(t),parents:(c=l,l=[],c),children:[]};return e[t].call(r.exports,r,r.exports,function(e){var t=S[e];if(!t)return j;var r=function(r){return t.hot.active?(S[r]?S[r].parents.includes(e)||S[r].parents.push(e):(l=[e],o=r),t.children.includes(r)||t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),l=[]),j(r)},n=function(e){return{configurable:!0,enumerable:!0,get:function(){return j[e]},set:function(t){j[e]=t}}};for(var a in j)Object.prototype.hasOwnProperty.call(j,a)&&"e"!==a&&Object.defineProperty(r,a,n(a));return r.e=function(e){return"ready"===p&&f("prepare"),y++,j.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===p&&(g[e]||P(e),0===y&&0===b&&O())}},r}(t)),r.l=!0,r.exports}j.m=e,j.c=S,j.d=function(e,t,r){j.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},j.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},j.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return j.d(t,"a",t),t},j.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},j.p="/",j.h=function(){return i};var V=window.webpackJsonp=window.webpackJsonp||[],C=V.push.bind(V);V.push=t,V=V.slice();for(var I=0;I<V.length;I++)t(V[I]);var D=C;x.push([27,0]),r()}({26:function(e,t,r){"use strict";var n=i(r(0)),o=i(r(21)),a=i(r(9));function i(e){return e&&e.__esModule?e:{default:e}}var s=document.getElementById("app");o.default.render(n.default.createElement(a.default,null),s)},27:function(e,t,r){e.exports=r(26)},3:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),a=s(o),i=s(r(1));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),n(t,[{key:"render",value:function(){var e=this.props,t=e.clsName,r=e.color,n=e.defaultMarker,o=e.position,i=e.sliderSize,s=e.markerSize,u=e.markerNumber,l={position:"absolute",left:o+"%",top:"0px",bottom:void 0,marginTop:.5*(i-s)+"px",marginLeft:"-"+.5*s+"px",marginBottom:void 0,display:0===o?"none":"block"};if(!this.props.customMarker){var c={backgroundColor:r,borderRadius:"100%",height:s+"px",width:s+"px"};n=a.default.createElement("div",{style:c})}return a.default.createElement("div",{className:t+"-"+u+"-marker",style:l},this.props.customMarker,n&&n)}}]),t}();t.default=u,u.propTypes={clsName:i.default.string,color:i.default.string,customMarker:i.default.node,offsetLeft:i.default.number,offsetTop:i.default.number,position:i.default.number,sliderSize:i.default.number,markerSize:i.default.number,markerNumber:i.default.number},u.defaultProps={clsName:"dynamic-slider",position:0}},4:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),a=s(o),i=s(r(1));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),n(t,[{key:"render",value:function(){var e=this.props,t=e.length,r=e.clsName,n={backgroundColor:this.props.color,get width(){return t?t+"%":"0%"},position:"absolute",bottom:0,height:"100%"};return console.log(n),a.default.createElement("div",{className:r+"-track",style:n})}}]),t}();t.default=u,u.propTypes={clsName:i.default.string,color:i.default.string,length:i.default.number},u.defaultProps={clsName:"dynamic-slider"}},5:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),a=s(o),i=s(r(1));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),n(t,[{key:"render",value:function(){var e=this.props,t=e.clsName,r=e.color,n=e.defaultThumb,o=e.position,i=e.sliderSize,s=e.thumbSize;console.log("position: "+this.props.position);var u={position:"absolute",left:o+"%",top:"0px",bottom:void 0,marginTop:.5*(i-s)+"px",marginLeft:"-"+.5*s+"px",marginBottom:void 0};if(!this.props.customThumb){var l={backgroundColor:r,borderRadius:"100%",height:s+"px",width:s+"px"};n=a.default.createElement("div",{style:l})}return a.default.createElement("div",{className:t+"-thumb",style:u},this.props.customThumb,n&&n)}}]),t}();t.default=u,u.propTypes={clsName:i.default.string,color:i.default.string,customThumb:i.default.node,offsetLeft:i.default.number,offsetTop:i.default.number,position:i.default.number,sliderSize:i.default.number,thumbSize:i.default.number},u.defaultProps={clsName:"dynamic-slider",position:0}},9:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0),a=c(o),i=c(r(1)),s=c(r(5)),u=c(r(4)),l=c(r(3));function c(e){return e&&e.__esModule?e:{default:e}}function d(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}function p(){}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={markerCount:0,drag:!1,currentPosition:0,percent:0,mainThumbValues:0,ratio:20,markerPositions:[],markerPercents:[],markerValues:[],markerRatios:[],step:1,dynamic:!0},r.onInteractionStart=r.onInteractionStart.bind(r),r.onMouseOrTouchMove=r.onMouseOrTouchMove.bind(r),r.onInteractionEnd=r.onInteractionEnd.bind(r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),n(t,[{key:"componentWillMount",value:function(){this.propsToState(this.props)}},{key:"componentWillReceiveProps",value:function(e){this.propsToState(e)}},{key:"onInteractionStart",value:function(e){var t=void 0!==e.touches?"touch":"mouse";console.log(t);"mouse"===t&&0!==e.button||(this.updateSliderValue(e,t),this.state.dynamic||this.setState({drag:!0}),this.addEvents(t),e.preventDefault())}},{key:"onInteractionEnd",value:function(){this.setState({drag:!1}),this.props.onChangeComplete(this.state),this.removeEvents()}},{key:"onMouseOrTouchMove",value:function(e){var t=void 0!==e.touches?"touch":"mouse";this.state.drag&&(this.updateSliderValue(e,t),e.stopPropagation())}},{key:"getSliderInfo",value:function(){var e=this.refs.slider;return{bounds:e.getBoundingClientRect(),length:e.clientWidth,height:e.clientHeight}}},{key:"addEvents",value:function(e){switch(e){case"mouse":document.addEventListener("mousemove",this.onMouseOrTouchMove),document.addEventListener("mouseup",this.onInteractionEnd);break;case"touch":document.addEventListener("touchmove",this.onMouseOrTouchMove),document.addEventListener("touchend",this.onInteractionEnd)}}},{key:"removeEvents",value:function(){document.removeEventListener("mousemove",this.onMouseOrTouchMove),document.removeEventListener("mouseup",this.onInteractionEnd),document.removeEventListener("touchmove",this.onMouseOrTouchMove),document.removeEventListener("touchend",this.onInteractionEnd)}},{key:"updateSliderValue",value:function(e,t){var r=this.state,n=r.maxValue,o=r.minValue,a=r.dynamic,i=this.state.mainThumbValue,s=void 0;if(a){var u=this.state.currentPosition+this.getSliderInfo().bounds.left,l=u+.5*this.state.thumbSize,c=u-.5*this.state.thumbSize;if(console.log("maxThumbArea: "+l),console.log("minThumbArea: "+c),s=(e.pageX>=c&&e.pageX<=l?e.pageX:this.getSliderInfo().bounds.left)-window.pageXOffset,console.log("e.pageX: "+e.pageX),console.log("xCoords: "+s),s===this.getSliderInfo().bounds.left-window.pageXOffset){var d=e.pageX-window.pageXOffset;this.state.drag||this.addMarker(d)}else this.setState({drag:!0})}else s=("touch"!==t?e.pageX:e.touches[0].pageX)-window.pageXOffset;var p,f=s-this.getSliderInfo().bounds.left;p=this.getSliderInfo().length;var h=this.clampValue(+(f/p).toFixed(2),0,1),m=this.valueFromPercent(h);if((i=this.calculateMatchingNotch(m))!==this.state.mainThumbValues){var v=100*(i-o)/(n-o);1===v&&(v=0),this.setState({percent:h,mainThumbValue:i,ratio:v,currentPosition:f},this.handleChange)}}},{key:"handleChange",value:function(){this.props.onChange(this.state)}},{key:"handleAddMarker",value:function(){var e=this.maxMinMarkerValues(),t=e.min,r=e.max,n=this.props,o=n.lockToMinMark,a=n.lockToMaxMark;!0===o?this.moveMainThumb(t):!0===a&&this.moveMainThumb(r),this.props.onAddMarker(this.state)}},{key:"maxMinMarkerValues",value:function(){var e=this.state.markerValues,t=this.state.markerPositions,r=this.state.markerRatios,n=this.state.markerPercents;return{min:{values:Math.min.apply(Math,d(e)),positions:Math.min.apply(Math,d(t)),ratios:Math.min.apply(Math,d(r)),percents:Math.min.apply(Math,d(n))},max:{values:Math.max.apply(Math,d(e)),positions:Math.max.apply(Math,d(t)),ratios:Math.max.apply(Math,d(r)),percents:Math.max.apply(Math,d(n))}}}},{key:"moveMainThumb",value:function(e){this.setState({mainThumbValue:e.values,percent:e.percents,ratio:e.ratios,currentPosition:e.positions})}},{key:"valueFromPercent",value:function(e){var t=this.state;return t.range*e+t.minValue}},{key:"calculateMatchingNotch",value:function(e){for(var t=this.state,r=t.step,n=t.maxValue,o=t.minValue,a=[],i=o;i<=n;i++)a.push(i);var s=[],u=!0,l=!1,c=void 0;try{for(var d,p=a[Symbol.iterator]();!(u=(d=p.next()).done);u=!0){var f=d.value;f!==o&&f!==n&&f%r!=0||s.push(f)}}catch(e){l=!0,c=e}finally{try{!u&&p.return&&p.return()}finally{if(l)throw c}}return s.reduce(function(t,r){return Math.abs(r-e)<Math.abs(t-e)?r:t})}},{key:"clampValue",value:function(e,t,r){return Math.max(t,Math.min(e,r))}},{key:"propsToState",value:function(e){var t=this,r=e.markerCount,n=e.markerValues,o=e.markerPercents,a=e.markerPositions,i=e.markerRatios;if(this.state.markerCount!==r&&this.setState({markerCount:r}),void 0!==n||0!==n.length)for(var s=function(e){n.length>0?t.setState(function(t){return{markerValues:[].concat(d(t.markerValues),[n[e]]),markerRatios:[].concat(d(t.markerRatios),[i[e]]),markerPercents:[].concat(d(t.markerPercents),[o[e]]),markerPositions:[].concat(d(t.markerPositions),[a[e]])}}):t.setState(function(e){return{markerValues:[].concat(d(e.markerValues),[0]),markerRatios:[].concat(d(e.markerRatios),[0]),markerPercents:[].concat(d(e.markerPercents),[0]),markerPositions:[].concat(d(e.markerPositions),[0])}})},u=0;u<r;u++)s(u);var l=e.markerSize,c=e.thumbSize,p=e.sliderSize;void 0===e.thumbSize&&(c=this.props.disableThumb?0:2*p),void 0===e.markerSize&&(l=.5*p);var f=e.minValue,h=e.maxValue,m=e.id,v=h-f,b=100*Math.max(this.state.mainThumbValue-f,0)/(h-f);this.setState(function(e){return{minValue:f,maxValue:h,range:v,ratio:b,thumbSize:c,markerSize:l,id:m}})}},{key:"addMarker",value:function(e){var t=this;console.log("!MARK START!"),console.log("addMarker markerPosition: "+e);var r=e-this.getSliderInfo().bounds.left,n=this.getSliderInfo().length,o=this.clampValue(+(r/n).toFixed(2),0,1),a=this.valueFromPercent(o),i=this.calculateMatchingNotch(a),s=this.state.markerValues,u=this.state,l=u.maxValue,c=u.minValue;if(i!==this.state.mainThumbValues&&i!==s.includes(i)){console.log(this.state.markerValues.length);var p=100*(i-c)/(l-c);this.setState(function(e,n){if(e.markerValues.length>=e.markerCount)var a=t.state.markerValues.slice(1),s=t.state.markerRatios.slice(1),u=t.state.markerPercents.slice(1),l=t.state.markerPositions.slice(1);return{percent:o,markerValues:[].concat(d(a||e.markerValues),[i]),markerRatios:[].concat(d(s||e.markerRatios),[p]),markerPositions:[].concat(d(l||e.markerPositions),[r]),markerPercents:[].concat(d(u||e.markerPercents),[o])}},this.handleAddMarker),console.log(this.state.markerValues)}}},{key:"render",value:function(){var e=this;console.log(this.state.markerValues),console.log(this.state.markerPositions),console.log(this.state.markerPercents),console.log(this.state.markerRatios);var t=this.props,r=t.clsName,n=t.vertical,o=t.sliderSize,i=t.disableThumb,c=(t.disableTrack,t.children),d=(t.label,t.trackColor),p=t.thumbColor,f=t.verticalSliderHeight,h=t.eventWrapperPadding,m={height:"100%",position:"relative",cursor:"pointer",margin:"0 auto",get padding(){return n?"0 "+h+"px":h+"px 0"},get width(){return n?o+"px":"auto"}},v={backgroundColor:this.props.sliderColor,position:"relative",overflow:"visible",get height(){return n?f:o+"px"},get width(){return n?o+"px":"100%"}};return a.default.createElement("div",{className:r+"-slider",onMouseDown:this.onInteractionStart,onTouchStart:this.onInteractionStart,style:m},a.default.createElement("div",{className:r+"-line",ref:"slider",style:v},a.default.createElement(u.default,{color:d,length:this.state.ratio,vertical:n}),a.default.createElement(s.default,{color:p,customThumb:c,disableThumb:i,position:this.state.ratio,sliderSize:o,thumbSize:this.state.thumbSize,value:this.state.value}),this.state.markerPositions.length>0&&this.state.markerValues.map(function(t,r){return a.default.createElement(l.default,{color:"yellow",key:r,markerNumber:r,markerSize:e.state.markerSize,position:t,sliderSize:o})})))}}]),t}();t.default=f,f.propTypes={clsName:i.default.string,dynamic:i.default.bool,markerCount:i.default.number,minValue:i.default.number,maxValue:i.default.number,onChange:i.default.func,onChangeComplete:i.default.func,onAddMarker:i.default.func,id:i.default.string,sliderColor:i.default.string,trackColor:i.default.string,thumbColor:i.default.string,disableThumb:i.default.bool,mainThumbValue:i.default.number,lockToMinMark:i.default.bool,lockToMaxMark:i.default.bool},f.defaultProps={clsName:"dynamic-slider",markerCount:2,minValue:0,maxValue:100,markerValues:[],markerRatios:[],markerPositions:[],markerPercents:[],onChange:p,onChangeComplete:p,onAddMarker:p,sliderColor:"blue",trackColor:"green",thumbColor:"red",id:null,disableThumb:!1,sliderSize:30,mainThumbValue:0,lockToMinMark:!0,lockToMaxMark:!1}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,